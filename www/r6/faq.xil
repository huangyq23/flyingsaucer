include. ../include/common-includes.inc

divStart(#fs).

include. ../include/menu.xil

h1. The ${fs} FAQ

This is our list of frequently-asked questions. With release R6, we moved a bunch of the material from here into our "Flying Saucer User's Guide":users-guide-r6#.pdf. Please contact us on our ${mailing-list.user} if you have more questions.

h2(fs_heading){clear:none}. General Questions

toc. 3 3 #

h3(fs_heading){clear:none}. What is ${fs}?

${fs} is an XHTML renderer written in Java. It's 100% Java, not a native wrapper, and it only handles valid XHTML + CSS. It is intended for embedding web-based user interfaces into Java applications (ex. web photo album generator, help viewer, iTunes Music Store clone). It cannot be used as a general purpose webbrowser since it does not support the malformed legacy HTML found on the web, though recent work on compatibility libraries may be enough to do what you need. See JTidy integration

h3(fs_heading){clear:none}. Does ${fs} support legacy HTML? 

h3(fs_heading){clear:none}. Can I use ${fs} to browse websites?

${fs} is not an HTML component. It is a rendering component for XHTML content, but it cannot handle the malformed HTML 4.0 of general webpages, and it has no support for purely stylistic markup like FONT and CENTER. You have to use valid XHTML and CSS. For most embedded uses this is fine since the application author usually has control over the documents to be loaded. If you really need full IE/Mozilla/Safari like fidelity for general purpose webpages you should look into a webbrowser wrapper like JDIC's Browser component.

h3(fs_heading){clear:none}. Is ${fs} a web browser?

The core renderer just handles XHTML and CSS. It doesn't know anything about form submission, managing cookies, or tracking the browsing history. It just renders XHTML/CSS to the screen. However, ${fs} does include a Browser application which provides these features and more. You can use this as a good starting point for your own applications.

h3(fs_heading){clear:none}. What kind of applications can I use ${fs} for?

${fs} can be used for any Java application that requires some sort of styled text. This can be as simple as a chat program or as complicated as a complete ebook reader with dynamic stylesheets. ${fs} is very forward thinking and is designed to be a part of the next generation of applications that combine rich desktop clients with web content. Some examples of application types are:

* chat programs
* online music stores
* a Gutenberg eBook reader
* a distributed dictionary application
* Sherlock style map and movie search
* Konfabulator and Dashboard components
* an RSS reader
* a Friendster client
* an eBay client
* a splash screen
* an about box
* a helpfile viewer
* a javadoc viewer
* report generation and viewing
* a stock ticker / weather reporter

h3(fs_heading){clear:none}. What XHTML/CSS features does ${fs} currently support?

With our R6 release it supports most of the common XHTML and CSS features. This includes:

* text and images (paragraphs, bold, italics, fonts, alignment, etc)
* the box model (borders, backgrounds, padding, margins)
* forms
* tables
* list items
* most CSS properties and shorthands
* float, absolute, relative, and fixed positioning support

h3(fs_heading){clear:none}. What XHTML/CSS features is ${fs} missing?

The only major feature missing as of R6 is the automatic table model (the old Netscape style of tables where the size of the content determined the size of the cells.) Fixed layout tables are supported. Other than that it's just a matter of squashing more bugs and getting more speed.

There is also no support for things outside the scope of XHTML/CSS such as Javascript, printing, Flash, SVG, or legacy HTML (though there is interest in all of those).

h3(fs_heading){clear:none}. How do I make my program follow hyperlinks?

You need a mouse listener that detects link clicks and does the HTTP request. The XHTMLPanel includes a built in mouse listener to do this, but you can override it if you wish. See the @org.xhtmlrenderer.swing.LinkListener@ class for an example.

h3(fs_heading){clear:none}. How do I get access to the Swing components that make up my form fields?

Take a look at the @org.xhtmlrenderer.simple.extend.XhtmlForm@ class. Form elements are "replaced" at runtime by the @org.xhtmlrenderer.swing.SwingReplacedElementFactory@ if you're using the @XHTMLPanel@ class for rendering. The factory actually creates a new XhtmlForm class which creates and tracks the components. There is a @submit()@ method in there that you can follow as an starting point.

h3(fs_heading){clear:none}. I have XML or XHTML stored in a Java String, not a file--how do I load this into an XHTMLPanel?

It's been tricky for us to come up with a decent set of method calls to cover initilizing the panel without creating tons of little methods.

In Java APIs, there is some confusion on usage between a String that represents an address (like a URI or a file path) and strings that represent content. Our API tends to expect that Strings will represent addresses.

In the R6 codebase you can use @panel.setDocumentFromString()@ to do this. The String will be passed to the standard XML parser and treated as a regular document.

It's important to remember that FS expects well-formed XML documents, and we don't have an extremely friendly relationship with the XML parsers; it's always a good idea to test that your document can be loaded outside of FS, without error, using Java XML APIs, before loading them in FS.

h2(fs_heading){clear:none}. Developer's FAQ

toc. 3 3 #

h3(fs_heading){clear:none}. How do I set up my CLASSPATH?

You only need the 

* @core-renderer.jar@ (required)
* @lib/cssparser-0-9-4-fs.jar@ (required)
* @lib/itext-paulo-155.jar@
* @lib/minium.jar@. 

The first two are required; iText is needed for PDF rendering, and Minium if you need Minium anti-aliasing.

That is all you need for your own programs. You also need an XML parser to be in your classpath, but this already included in recent versions of the JRE. To run the browser or use any of it's support classes you will need the browser.jar file.

h3(fs_heading){clear:none}. How do I build XR without Ant? 

h3(fs_heading){clear:none}. How do I build XR from within my IDE?

Our Ant @build.xml@ file includes all JAR files in the @/lib@ directory, plus the @/resources@ directory tree in the classpath. The compile target also copies CSS and properties resources from @/src/css@ and @src/conf@ to @/build/resources@. If running from an IDE, you will need to synchronize this yourself.

divEnd.
